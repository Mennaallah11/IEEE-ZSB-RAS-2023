
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006ce  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000006fd  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  0000070b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000268f  00000000  00000000  0000088b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aea  00000000  00000000  00002f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000117f  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  00004b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  00004f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012c2  00000000  00000000  000052e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  000065a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000062c  0000062c  000006c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000066d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000042  000004e0  000004e0  00000574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_enuSendCmnd 00000042  00000522  00000522  000005b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_enuInit 00000096  00000276  00000276  0000030a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_enuSendChar 00000042  00000564  00000564  000005f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_enuSetAc 0000002e  000005a6  000005a6  0000063a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_enuClear 00000016  00000600  00000600  00000694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_16 00000068  00000478  00000478  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.ADC_pfNotification 00000002  00800060  00800060  000006ce  2**0
                  ALLOC
 22 .bss.ADC_u8BusyFlag 00000001  0080006a  0080006a  000006ce  2**0
                  ALLOC
 23 .text.DIO_enuSetPinDirection 000000e4  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.DIO_enuSetPinValue 000000e4  00000192  00000192  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.DIO_enuSetPortDirection 00000084  0000030c  0000030c  000003a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.DIO_enuSetPortValue 0000002c  000005d4  000005d4  00000668  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_11 00000076  00000390  00000390  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_10 00000072  00000406  00000406  0000049a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .bss.Local_u16CounterCTC.1646 00000002  00800062  00800062  000006ce  2**0
                  ALLOC
 30 .bss.Local_u16CounterOvf.1640 00000002  00800064  00800064  000006ce  2**0
                  ALLOC
 31 .bss.Timer0_pftimer0CTC 00000002  00800066  00800066  000006ce  2**0
                  ALLOC
 32 .bss.Timer0_pftimer0OVF 00000002  00800068  00800068  000006ce  2**0
                  ALLOC
 33 .text.__dummy_fini 00000002  00000634  00000634  000006c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_funcs_on_exit 00000002  00000636  00000636  000006ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_simulator_exit 00000002  00000638  00000638  000006cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.exit    00000016  00000616  00000616  000006aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text._Exit   00000004  00000630  00000630  000006c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
   8:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
   c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  10:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  14:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  18:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  1c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  20:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  24:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  28:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_10>
  2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_11>
  30:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  34:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  38:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  3c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  40:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_16>
  44:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  48:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  4c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
  50:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 6b       	ori	r16, 0xB0	; 176
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <main>
  a6:	0c 94 0b 03 	jmp	0x616	; 0x616 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

0000062c <__bad_interrupt>:
 62c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000004e0 <main>:
void servo_angle();


int main()
{
	LCD_enuInit();
 4e0:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_enuInit>
	 LCD_enuSetAc(1,0);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LCD_enuSetAc>
	 LCD_enuSendChar('V');
 4ec:	86 e5       	ldi	r24, 0x56	; 86
 4ee:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_enuSendChar>
	 LCD_enuSetAc(1,1);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LCD_enuSetAc>
	 LCD_enuSendChar(':');
 4fa:	8a e3       	ldi	r24, 0x3A	; 58
 4fc:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_enuSendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 500:	2f ef       	ldi	r18, 0xFF	; 255
 502:	83 ed       	ldi	r24, 0xD3	; 211
 504:	90 e3       	ldi	r25, 0x30	; 48
 506:	21 50       	subi	r18, 0x01	; 1
 508:	80 40       	sbci	r24, 0x00	; 0
 50a:	90 40       	sbci	r25, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <main+0x26>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <main+0x30>
 510:	00 00       	nop
	 					//	Timers_enudelayms(2000);
						 _delay_ms(2000);
							 					LCD_enuClear();
 512:	0e 94 00 03 	call	0x600	; 0x600 <LCD_enuClear>
												 LCD_enuSendChar('V');
 516:	86 e5       	ldi	r24, 0x56	; 86
 518:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_enuSendChar>
						check = 0;
					}
				}
			}
		}*/
	}
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	08 95       	ret

Disassembly of section .text.LCD_enuSendCmnd:

00000522 <LCD_enuSendCmnd>:
 {
     for(u8 i ; Copy_pu8String[i] != '\0' ; i++ ){
         LCD_enuSendChar(Copy_pu8String[i]);
     }
     return  STD_OK;
 }
 522:	cf 93       	push	r28
 524:	c8 2f       	mov	r28, r24
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	64 e0       	ldi	r22, 0x04	; 4
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 530:	40 e0       	ldi	r20, 0x00	; 0
 532:	65 e0       	ldi	r22, 0x05	; 5
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 53a:	6c 2f       	mov	r22, r28
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DIO_enuSetPortValue>
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	66 e0       	ldi	r22, 0x06	; 6
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	8a 95       	dec	r24
 550:	f1 f7       	brne	.-4      	; 0x54e <LCD_enuSendCmnd+0x2c>
 552:	00 c0       	rjmp	.+0      	; 0x554 <LCD_enuSendCmnd+0x32>
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	66 e0       	ldi	r22, 0x06	; 6
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	cf 91       	pop	r28
 562:	08 95       	ret

Disassembly of section .text.LCD_enuInit:

00000276 <LCD_enuInit>:
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	65 e0       	ldi	r22, 0x05	; 5
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_enuSetPortDirection>
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DIO_enuSetPortValue>
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	65 e0       	ldi	r22, 0x05	; 5
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	66 e0       	ldi	r22, 0x06	; 6
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 2c2:	2f eb       	ldi	r18, 0xBF	; 191
 2c4:	8a ed       	ldi	r24, 0xDA	; 218
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <LCD_enuInit+0x52>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_enuInit+0x5c>
 2d2:	00 00       	nop
 2d4:	88 e3       	ldi	r24, 0x38	; 56
 2d6:	0e 94 91 02 	call	0x522	; 0x522 <LCD_enuSendCmnd>
 2da:	2a e6       	ldi	r18, 0x6A	; 106
 2dc:	2a 95       	dec	r18
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_enuInit+0x66>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_enuInit+0x6c>
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	0e 94 91 02 	call	0x522	; 0x522 <LCD_enuSendCmnd>
 2e8:	8a e6       	ldi	r24, 0x6A	; 106
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_enuInit+0x74>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_enuInit+0x7a>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 91 02 	call	0x522	; 0x522 <LCD_enuSendCmnd>
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_enuInit+0x84>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_enuInit+0x8a>
 300:	00 00       	nop
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	0e 94 91 02 	call	0x522	; 0x522 <LCD_enuSendCmnd>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret

Disassembly of section .text.LCD_enuSendChar:

00000564 <LCD_enuSendChar>:
 564:	cf 93       	push	r28
 566:	c8 2f       	mov	r28, r24
 568:	41 e0       	ldi	r20, 0x01	; 1
 56a:	64 e0       	ldi	r22, 0x04	; 4
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	65 e0       	ldi	r22, 0x05	; 5
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 57c:	6c 2f       	mov	r22, r28
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DIO_enuSetPortValue>
 584:	41 e0       	ldi	r20, 0x01	; 1
 586:	66 e0       	ldi	r22, 0x06	; 6
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	8a 95       	dec	r24
 592:	f1 f7       	brne	.-4      	; 0x590 <LCD_enuSendChar+0x2c>
 594:	00 c0       	rjmp	.+0      	; 0x596 <LCD_enuSendChar+0x32>
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	66 e0       	ldi	r22, 0x06	; 6
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enuSetPinValue>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

Disassembly of section .text.LCD_enuSetAc:

000005a6 <LCD_enuSetAc>:
 5a6:	68 32       	cpi	r22, 0x28	; 40
 5a8:	88 f4       	brcc	.+34     	; 0x5cc <LCD_enuSetAc+0x26>
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	19 f0       	breq	.+6      	; 0x5b4 <LCD_enuSetAc+0xe>
 5ae:	82 30       	cpi	r24, 0x02	; 2
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <LCD_enuSetAc+0x1a>
 5b2:	0e c0       	rjmp	.+28     	; 0x5d0 <LCD_enuSetAc+0x2a>
 5b4:	80 e8       	ldi	r24, 0x80	; 128
 5b6:	86 0f       	add	r24, r22
 5b8:	0e 94 91 02 	call	0x522	; 0x522 <LCD_enuSendCmnd>
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	08 95       	ret
 5c0:	80 ec       	ldi	r24, 0xC0	; 192
 5c2:	86 0f       	add	r24, r22
 5c4:	0e 94 91 02 	call	0x522	; 0x522 <LCD_enuSendCmnd>
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	08 95       	ret
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	08 95       	ret
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	08 95       	ret

Disassembly of section .text.LCD_enuClear:

00000600 <LCD_enuClear>:
 /*******************************************************/

 ERROR LCD_enuClear(void)
 {
	 LCD_enuSendCmnd(DISPLAY_CLEAR);
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 91 02 	call	0x522	; 0x522 <LCD_enuSendCmnd>
 606:	8f ec       	ldi	r24, 0xCF	; 207
 608:	97 e0       	ldi	r25, 0x07	; 7
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_enuClear+0xa>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_enuClear+0x10>
 610:	00 00       	nop
	 _delay_ms(1);
	 return  STD_OK;

 }
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	08 95       	ret

Disassembly of section .text.__vector_16:

00000478 <__vector_16>:
/********************************************************/

/* Prototype for ADC ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	4f 93       	push	r20
 488:	5f 93       	push	r21
 48a:	6f 93       	push	r22
 48c:	7f 93       	push	r23
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	af 93       	push	r26
 494:	bf 93       	push	r27
 496:	ef 93       	push	r30
 498:	ff 93       	push	r31
if(ADC_pfNotification != NULL)
 49a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 49e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4a2:	89 2b       	or	r24, r25
 4a4:	61 f0       	breq	.+24     	; 0x4be <__vector_16+0x46>
{
/* Clear Flag */
ADC_u8BusyFlag = 0;
 4a6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <ADC_u8BusyFlag>
/* Clear PIE of ADC */
CLR_BIT(ADCSRA,ADIE);
 4aa:	86 b1       	in	r24, 0x06	; 6
 4ac:	87 7f       	andi	r24, 0xF7	; 247
 4ae:	86 b9       	out	0x06, r24	; 6
/* Calling Notification function */
ADC_pfNotification(ADC_u16_ADC_REG);
 4b0:	84 b1       	in	r24, 0x04	; 4
 4b2:	95 b1       	in	r25, 0x05	; 5
 4b4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4b8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4bc:	09 95       	icall
}
 4be:	ff 91       	pop	r31
 4c0:	ef 91       	pop	r30
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	7f 91       	pop	r23
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

Disassembly of section .text.DIO_enuSetPinDirection:

000000ae <DIO_enuSetPinDirection>:
	}


	return Local_enuErrorStatus;

}
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	08 f0       	brcs	.+2      	; 0xb4 <DIO_enuSetPinDirection+0x6>
  b2:	67 c0       	rjmp	.+206    	; 0x182 <DIO_enuSetPinDirection+0xd4>
  b4:	68 30       	cpi	r22, 0x08	; 8
  b6:	08 f0       	brcs	.+2      	; 0xba <DIO_enuSetPinDirection+0xc>
  b8:	66 c0       	rjmp	.+204    	; 0x186 <DIO_enuSetPinDirection+0xd8>
  ba:	42 30       	cpi	r20, 0x02	; 2
  bc:	08 f0       	brcs	.+2      	; 0xc0 <DIO_enuSetPinDirection+0x12>
  be:	65 c0       	rjmp	.+202    	; 0x18a <DIO_enuSetPinDirection+0xdc>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	e9 f0       	breq	.+58     	; 0xfe <DIO_enuSetPinDirection+0x50>
  c4:	30 f0       	brcs	.+12     	; 0xd2 <DIO_enuSetPinDirection+0x24>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	81 f1       	breq	.+96     	; 0x12a <DIO_enuSetPinDirection+0x7c>
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	09 f4       	brne	.+2      	; 0xd0 <DIO_enuSetPinDirection+0x22>
  ce:	43 c0       	rjmp	.+134    	; 0x156 <DIO_enuSetPinDirection+0xa8>
  d0:	5e c0       	rjmp	.+188    	; 0x18e <DIO_enuSetPinDirection+0xe0>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	06 2e       	mov	r0, r22
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_enuSetPinDirection+0x30>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_enuSetPinDirection+0x2c>
  e2:	80 95       	com	r24
  e4:	2a b3       	in	r18, 0x1a	; 26
  e6:	28 23       	and	r18, r24
  e8:	84 2f       	mov	r24, r20
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_enuSetPinDirection+0x44>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_enuSetPinDirection+0x40>
  f6:	82 2b       	or	r24, r18
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 95       	ret
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	06 2e       	mov	r0, r22
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_enuSetPinDirection+0x5c>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_enuSetPinDirection+0x58>
 10e:	20 95       	com	r18
 110:	87 b3       	in	r24, 0x17	; 23
 112:	28 23       	and	r18, r24
 114:	84 2f       	mov	r24, r20
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_enuSetPinDirection+0x70>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_enuSetPinDirection+0x6c>
 122:	82 2b       	or	r24, r18
 124:	87 bb       	out	0x17, r24	; 23
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	06 2e       	mov	r0, r22
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_enuSetPinDirection+0x88>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_enuSetPinDirection+0x84>
 13a:	20 95       	com	r18
 13c:	84 b3       	in	r24, 0x14	; 20
 13e:	28 23       	and	r18, r24
 140:	84 2f       	mov	r24, r20
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_enuSetPinDirection+0x9c>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_enuSetPinDirection+0x98>
 14e:	82 2b       	or	r24, r18
 150:	84 bb       	out	0x14, r24	; 20
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	06 2e       	mov	r0, r22
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_enuSetPinDirection+0xb4>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_enuSetPinDirection+0xb0>
 166:	20 95       	com	r18
 168:	81 b3       	in	r24, 0x11	; 17
 16a:	28 23       	and	r18, r24
 16c:	84 2f       	mov	r24, r20
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_enuSetPinDirection+0xc8>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_enuSetPinDirection+0xc4>
 17a:	82 2b       	or	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	08 95       	ret
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	08 95       	ret
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	08 95       	ret
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret

Disassembly of section .text.DIO_enuSetPinValue:

00000192 <DIO_enuSetPinValue>:
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	08 f0       	brcs	.+2      	; 0x198 <DIO_enuSetPinValue+0x6>
 196:	67 c0       	rjmp	.+206    	; 0x266 <DIO_enuSetPinValue+0xd4>
 198:	68 30       	cpi	r22, 0x08	; 8
 19a:	08 f0       	brcs	.+2      	; 0x19e <DIO_enuSetPinValue+0xc>
 19c:	66 c0       	rjmp	.+204    	; 0x26a <DIO_enuSetPinValue+0xd8>
 19e:	42 30       	cpi	r20, 0x02	; 2
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <DIO_enuSetPinValue+0x12>
 1a2:	65 c0       	rjmp	.+202    	; 0x26e <DIO_enuSetPinValue+0xdc>
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	e9 f0       	breq	.+58     	; 0x1e2 <DIO_enuSetPinValue+0x50>
 1a8:	30 f0       	brcs	.+12     	; 0x1b6 <DIO_enuSetPinValue+0x24>
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	81 f1       	breq	.+96     	; 0x20e <DIO_enuSetPinValue+0x7c>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <DIO_enuSetPinValue+0x22>
 1b2:	43 c0       	rjmp	.+134    	; 0x23a <DIO_enuSetPinValue+0xa8>
 1b4:	5e c0       	rjmp	.+188    	; 0x272 <DIO_enuSetPinValue+0xe0>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	06 2e       	mov	r0, r22
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_enuSetPinValue+0x30>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_enuSetPinValue+0x2c>
 1c6:	80 95       	com	r24
 1c8:	2b b3       	in	r18, 0x1b	; 27
 1ca:	28 23       	and	r18, r24
 1cc:	84 2f       	mov	r24, r20
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_enuSetPinValue+0x44>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_enuSetPinValue+0x40>
 1da:	82 2b       	or	r24, r18
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 95       	ret
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	06 2e       	mov	r0, r22
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_enuSetPinValue+0x5c>
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_enuSetPinValue+0x58>
 1f2:	20 95       	com	r18
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	28 23       	and	r18, r24
 1f8:	84 2f       	mov	r24, r20
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_enuSetPinValue+0x70>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_enuSetPinValue+0x6c>
 206:	82 2b       	or	r24, r18
 208:	88 bb       	out	0x18, r24	; 24
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	06 2e       	mov	r0, r22
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_enuSetPinValue+0x88>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_enuSetPinValue+0x84>
 21e:	20 95       	com	r18
 220:	85 b3       	in	r24, 0x15	; 21
 222:	28 23       	and	r18, r24
 224:	84 2f       	mov	r24, r20
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_enuSetPinValue+0x9c>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_enuSetPinValue+0x98>
 232:	82 2b       	or	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	06 2e       	mov	r0, r22
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_enuSetPinValue+0xb4>
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_enuSetPinValue+0xb0>
 24a:	20 95       	com	r18
 24c:	82 b3       	in	r24, 0x12	; 18
 24e:	28 23       	and	r18, r24
 250:	84 2f       	mov	r24, r20
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_enuSetPinValue+0xc8>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_enuSetPinValue+0xc4>
 25e:	82 2b       	or	r24, r18
 260:	82 bb       	out	0x12, r24	; 18
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	08 95       	ret
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	08 95       	ret
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	08 95       	ret
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret

Disassembly of section .text.DIO_enuSetPortDirection:

0000030c <DIO_enuSetPortDirection>:

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
	if ((Copy_u8PortDirection == DIO_u8OUTPUT) ||( Copy_u8PortDirection == DIO_u8INPUT))
 30c:	62 30       	cpi	r22, 0x02	; 2
 30e:	a0 f5       	brcc	.+104    	; 0x378 <DIO_enuSetPortDirection+0x6c>
	{
		switch (Copy_u8PortId){
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	89 f0       	breq	.+34     	; 0x336 <DIO_enuSetPortDirection+0x2a>
 314:	28 f0       	brcs	.+10     	; 0x320 <DIO_enuSetPortDirection+0x14>
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	c9 f0       	breq	.+50     	; 0x34c <DIO_enuSetPortDirection+0x40>
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	11 f1       	breq	.+68     	; 0x362 <DIO_enuSetPortDirection+0x56>
 31e:	2e c0       	rjmp	.+92     	; 0x37c <DIO_enuSetPortDirection+0x70>
			case DIO_u8PORTA :
			switch (Copy_u8PortDirection) {
 320:	66 23       	and	r22, r22
 322:	31 f0       	breq	.+12     	; 0x330 <DIO_enuSetPortDirection+0x24>
 324:	61 30       	cpi	r22, 0x01	; 1
 326:	61 f5       	brne	.+88     	; 0x380 <DIO_enuSetPortDirection+0x74>
				case DIO_u8OUTPUT :DDRA = 0xff;break;
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	8a bb       	out	0x1a, r24	; 26
}

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
 32c:	80 e0       	ldi	r24, 0x00	; 0
	if ((Copy_u8PortDirection == DIO_u8OUTPUT) ||( Copy_u8PortDirection == DIO_u8INPUT))
	{
		switch (Copy_u8PortId){
			case DIO_u8PORTA :
			switch (Copy_u8PortDirection) {
				case DIO_u8OUTPUT :DDRA = 0xff;break;
 32e:	08 95       	ret
				case DIO_u8INPUT :DDRA = 0x00;break ;
 330:	1a ba       	out	0x1a, r1	; 26
}

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
 332:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (Copy_u8PortId){
			case DIO_u8PORTA :
			switch (Copy_u8PortDirection) {
				case DIO_u8OUTPUT :DDRA = 0xff;break;
				case DIO_u8INPUT :DDRA = 0x00;break ;
 334:	08 95       	ret
			}break ;

			case DIO_u8PORTB :
			switch (Copy_u8PortDirection ){
 336:	66 23       	and	r22, r22
 338:	31 f0       	breq	.+12     	; 0x346 <DIO_enuSetPortDirection+0x3a>
 33a:	61 30       	cpi	r22, 0x01	; 1
 33c:	19 f5       	brne	.+70     	; 0x384 <DIO_enuSetPortDirection+0x78>
				case DIO_u8OUTPUT :DDRB = 0xff;break;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	87 bb       	out	0x17, r24	; 23
}

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
 342:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_u8INPUT :DDRA = 0x00;break ;
			}break ;

			case DIO_u8PORTB :
			switch (Copy_u8PortDirection ){
				case DIO_u8OUTPUT :DDRB = 0xff;break;
 344:	08 95       	ret
				case DIO_u8INPUT :DDRB = 0x00;break ;
 346:	17 ba       	out	0x17, r1	; 23
}

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
 348:	80 e0       	ldi	r24, 0x00	; 0
			}break ;

			case DIO_u8PORTB :
			switch (Copy_u8PortDirection ){
				case DIO_u8OUTPUT :DDRB = 0xff;break;
				case DIO_u8INPUT :DDRB = 0x00;break ;
 34a:	08 95       	ret
			}break ;

			case DIO_u8PORTC :
			switch (Copy_u8PortDirection ){
 34c:	66 23       	and	r22, r22
 34e:	31 f0       	breq	.+12     	; 0x35c <DIO_enuSetPortDirection+0x50>
 350:	61 30       	cpi	r22, 0x01	; 1
 352:	d1 f4       	brne	.+52     	; 0x388 <DIO_enuSetPortDirection+0x7c>
				case DIO_u8OUTPUT :DDRC = 0xff;break;
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	84 bb       	out	0x14, r24	; 20
}

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
 358:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_u8INPUT :DDRB = 0x00;break ;
			}break ;

			case DIO_u8PORTC :
			switch (Copy_u8PortDirection ){
				case DIO_u8OUTPUT :DDRC = 0xff;break;
 35a:	08 95       	ret
				case DIO_u8INPUT :DDRC = 0x00;break ;
 35c:	14 ba       	out	0x14, r1	; 20
}

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
 35e:	80 e0       	ldi	r24, 0x00	; 0
			}break ;

			case DIO_u8PORTC :
			switch (Copy_u8PortDirection ){
				case DIO_u8OUTPUT :DDRC = 0xff;break;
				case DIO_u8INPUT :DDRC = 0x00;break ;
 360:	08 95       	ret
			}break ;

			case DIO_u8PORTD :
			switch (Copy_u8PortDirection ){
 362:	66 23       	and	r22, r22
 364:	31 f0       	breq	.+12     	; 0x372 <DIO_enuSetPortDirection+0x66>
 366:	61 30       	cpi	r22, 0x01	; 1
 368:	89 f4       	brne	.+34     	; 0x38c <DIO_enuSetPortDirection+0x80>
				case DIO_u8OUTPUT :DDRD = 0xff;break;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	81 bb       	out	0x11, r24	; 17
}

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
 36e:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_u8INPUT :DDRC = 0x00;break ;
			}break ;

			case DIO_u8PORTD :
			switch (Copy_u8PortDirection ){
				case DIO_u8OUTPUT :DDRD = 0xff;break;
 370:	08 95       	ret
				case DIO_u8INPUT :DDRD = 0x00;break ;
 372:	11 ba       	out	0x11, r1	; 17
}

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
 374:	80 e0       	ldi	r24, 0x00	; 0
			}break ;

			case DIO_u8PORTD :
			switch (Copy_u8PortDirection ){
				case DIO_u8OUTPUT :DDRD = 0xff;break;
				case DIO_u8INPUT :DDRD = 0x00;break ;
 376:	08 95       	ret

			default :Local_u8Errorstate = STD_NOTOK;
		}
	}
	else {
		Local_u8Errorstate = STD_OK;
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret
			switch (Copy_u8PortDirection ){
				case DIO_u8OUTPUT :DDRD = 0xff;break;
				case DIO_u8INPUT :DDRD = 0x00;break ;
			}break ;

			default :Local_u8Errorstate = STD_NOTOK;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	08 95       	ret
}

/**********************************************************************/
ERROR DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
	ERROR Local_u8Errorstate = STD_OK ;
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	08 95       	ret
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret
 38c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		Local_u8Errorstate = STD_OK;
	}
	return Local_u8Errorstate  ;
}
 38e:	08 95       	ret

Disassembly of section .text.DIO_enuSetPortValue:

000005d4 <DIO_enuSetPortValue>:
/***********************************************************************/
ERROR DIO_enuSetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
	ERROR Local_u8Errorstate = STD_OK ;
	switch (Copy_u8PortId)
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	49 f0       	breq	.+18     	; 0x5ea <DIO_enuSetPortValue+0x16>
 5d8:	28 f0       	brcs	.+10     	; 0x5e4 <DIO_enuSetPortValue+0x10>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	49 f0       	breq	.+18     	; 0x5f0 <DIO_enuSetPortValue+0x1c>
 5de:	83 30       	cpi	r24, 0x03	; 3
 5e0:	51 f0       	breq	.+20     	; 0x5f6 <DIO_enuSetPortValue+0x22>
 5e2:	0c c0       	rjmp	.+24     	; 0x5fc <DIO_enuSetPortValue+0x28>
	{
		case DIO_u8PORTA:PORTA =Copy_u8PortValue ; break ;
 5e4:	6b bb       	out	0x1b, r22	; 27
	return Local_u8Errorstate  ;
}
/***********************************************************************/
ERROR DIO_enuSetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
	ERROR Local_u8Errorstate = STD_OK ;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
	switch (Copy_u8PortId)
	{
		case DIO_u8PORTA:PORTA =Copy_u8PortValue ; break ;
 5e8:	08 95       	ret
		case DIO_u8PORTB:PORTB =Copy_u8PortValue ; break ;
 5ea:	68 bb       	out	0x18, r22	; 24
	return Local_u8Errorstate  ;
}
/***********************************************************************/
ERROR DIO_enuSetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
	ERROR Local_u8Errorstate = STD_OK ;
 5ec:	80 e0       	ldi	r24, 0x00	; 0
	switch (Copy_u8PortId)
	{
		case DIO_u8PORTA:PORTA =Copy_u8PortValue ; break ;
		case DIO_u8PORTB:PORTB =Copy_u8PortValue ; break ;
 5ee:	08 95       	ret
		case DIO_u8PORTC:PORTC =Copy_u8PortValue ; break ;
 5f0:	65 bb       	out	0x15, r22	; 21
	return Local_u8Errorstate  ;
}
/***********************************************************************/
ERROR DIO_enuSetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
	ERROR Local_u8Errorstate = STD_OK ;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
	switch (Copy_u8PortId)
	{
		case DIO_u8PORTA:PORTA =Copy_u8PortValue ; break ;
		case DIO_u8PORTB:PORTB =Copy_u8PortValue ; break ;
		case DIO_u8PORTC:PORTC =Copy_u8PortValue ; break ;
 5f4:	08 95       	ret
		case DIO_u8PORTD:PORTD =Copy_u8PortValue ; break ;
 5f6:	62 bb       	out	0x12, r22	; 18
	return Local_u8Errorstate  ;
}
/***********************************************************************/
ERROR DIO_enuSetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
	ERROR Local_u8Errorstate = STD_OK ;
 5f8:	80 e0       	ldi	r24, 0x00	; 0
	switch (Copy_u8PortId)
	{
		case DIO_u8PORTA:PORTA =Copy_u8PortValue ; break ;
		case DIO_u8PORTB:PORTB =Copy_u8PortValue ; break ;
		case DIO_u8PORTC:PORTC =Copy_u8PortValue ; break ;
		case DIO_u8PORTD:PORTD =Copy_u8PortValue ; break ;
 5fa:	08 95       	ret
		default :Local_u8Errorstate = STD_NOTOK;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8Errorstate  ;
}
 5fe:	08 95       	ret

Disassembly of section .text.__vector_11:

00000390 <__vector_11>:
}
/******************************************/
/* Prototype for ISR of Timer0 OVF */
void __vector_11(void)	__attribute__((signal));
void __vector_11(void)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	3f 93       	push	r19
 39e:	4f 93       	push	r20
 3a0:	5f 93       	push	r21
 3a2:	6f 93       	push	r22
 3a4:	7f 93       	push	r23
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
		{
			Timer0_pftimer0CTC();
		}
	}
	static u16 Local_u16CounterOvf = 0;
	Local_u16CounterOvf++;
 3b2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_u16CounterOvf.1640>
 3b6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Local_u16CounterOvf.1640+0x1>
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Local_u16CounterOvf.1640+0x1>
 3c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_u16CounterOvf.1640>
	if(Local_u16CounterOvf == overflows)
 3c4:	83 34       	cpi	r24, 0x43	; 67
 3c6:	9f 40       	sbci	r25, 0x0F	; 15
 3c8:	69 f4       	brne	.+26     	; 0x3e4 <__vector_11+0x54>
	{
		/* update preload value */
		TCNT0 = preload_value;
 3ca:	80 ec       	ldi	r24, 0xC0	; 192
 3cc:	82 bf       	out	0x32, r24	; 50
		/* Clear the OVF Counter */
		Local_u16CounterOvf = 0;
 3ce:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Local_u16CounterOvf.1640+0x1>
 3d2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Local_u16CounterOvf.1640>
		/* Call application function */
		if(Timer0_pftimer0OVF != NULL)
 3d6:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <Timer0_pftimer0OVF>
 3da:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <Timer0_pftimer0OVF+0x1>
 3de:	30 97       	sbiw	r30, 0x00	; 0
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <__vector_11+0x54>
		{
			Timer0_pftimer0OVF();
 3e2:	09 95       	icall
		}
	}
	
}
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

Disassembly of section .text.__vector_10:

00000406 <__vector_10>:
/*************************************/
void __vector_10(void)	__attribute__((signal));
void __vector_10(void)
{
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
		  {
			  Timer0_pftimer0CTC();
		  }
	  }
	  static u16 Local_u16CounterCTC = 0;
	  Local_u16CounterCTC++;
 428:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Local_u16CounterCTC.1646>
 42c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Local_u16CounterCTC.1646+0x1>
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Local_u16CounterCTC.1646+0x1>
 436:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Local_u16CounterCTC.1646>
	  if(Local_u16CounterCTC == CTC)
 43a:	80 31       	cpi	r24, 0x10	; 16
 43c:	97 42       	sbci	r25, 0x27	; 39
 43e:	59 f4       	brne	.+22     	; 0x456 <__vector_10+0x50>
	  {
		/* Clear the OVF Counter */
		Local_u16CounterCTC = 0;
 440:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Local_u16CounterCTC.1646+0x1>
 444:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Local_u16CounterCTC.1646>
		/* Call application function */
		if(Timer0_pftimer0CTC != NULL)
 448:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Timer0_pftimer0CTC>
 44c:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <Timer0_pftimer0CTC+0x1>
 450:	30 97       	sbiw	r30, 0x00	; 0
 452:	09 f0       	breq	.+2      	; 0x456 <__vector_10+0x50>
		{
			Timer0_pftimer0CTC();
 454:	09 95       	icall
		}
    	}
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000634 <_fini>:
 634:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000636 <__funcs_on_exit>:
 636:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000638 <__simulator_exit>:
 638:	08 95       	ret

Disassembly of section .text.exit:

00000616 <exit>:
 616:	ec 01       	movw	r28, r24
 618:	0e 94 1b 03 	call	0x636	; 0x636 <__funcs_on_exit>
 61c:	0e 94 1a 03 	call	0x634	; 0x634 <_fini>
 620:	ce 01       	movw	r24, r28
 622:	0e 94 1c 03 	call	0x638	; 0x638 <__simulator_exit>
 626:	ce 01       	movw	r24, r28
 628:	0e 94 18 03 	call	0x630	; 0x630 <_Exit>

Disassembly of section .text._Exit:

00000630 <_Exit>:
 630:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
