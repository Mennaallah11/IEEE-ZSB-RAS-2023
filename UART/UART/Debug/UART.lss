
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ba  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002e9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000002f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011b6  00000000  00000000  0000039f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b5  00000000  00000000  00001555  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c4  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023f  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000771  00000000  00000000  0000271b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000238  00000238  000002ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000070  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_enuInit 00000020  000001ec  000001ec  00000260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_enuSetPinValue 000000e4  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.UART_enuInit 0000002c  000001c0  000001c0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.UART_enuResiveDataByte 00000016  0000020c  0000020c  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  00000240  00000240  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  00000242  00000242  000002b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000244  00000244  000002b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000222  00000222  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  0000023c  0000023c  000002b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  64:	0c 94 11 01 	jmp	0x222	; 0x222 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000150 <main>:




int main()
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	0f 92       	push	r0
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
	u8 Data ;
	DIO_enuInit();
 15a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_enuInit>
	UART_enuInit();
 15e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_enuInit>
	
	while(1)
	{
		UART_enuResiveDataByte(&Data);
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	0e 94 06 01 	call	0x20c	; 0x20c <UART_enuResiveDataByte>
		if(Data == 'a')
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	81 36       	cpi	r24, 0x61	; 97
 16e:	31 f4       	brne	.+12     	; 0x17c <main+0x2c>
		{
			DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8HIGH);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 17a:	f3 cf       	rjmp	.-26     	; 0x162 <main+0x12>
		}
		else if (Data == 'b')
 17c:	82 36       	cpi	r24, 0x62	; 98
 17e:	31 f4       	brne	.+12     	; 0x18c <main+0x3c>
		{
			DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8HIGH);
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 18a:	eb cf       	rjmp	.-42     	; 0x162 <main+0x12>
	    }	
	    else if (Data == 'y')
 18c:	89 37       	cpi	r24, 0x79	; 121
 18e:	31 f4       	brne	.+12     	; 0x19c <main+0x4c>
	    {
			DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8HIGH);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 19a:	e3 cf       	rjmp	.-58     	; 0x162 <main+0x12>
	    }
		else if (Data == 's')
 19c:	83 37       	cpi	r24, 0x73	; 115
 19e:	09 f7       	brne	.-62     	; 0x162 <main+0x12>
		{
			DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8LOW);
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
			DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8LOW);
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
			DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8LOW);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 1be:	d1 cf       	rjmp	.-94     	; 0x162 <main+0x12>

Disassembly of section .text.DIO_enuInit:

000001ec <DIO_enuInit>:

ERROR DIO_enuInit(void)
{
	ERROR Local_enuErrorStatus = STD_OK;

	DDRA = CONC(DIO_u8PA7_DIR , DIO_u8PA6_DIR , DIO_u8PA5_DIR , DIO_u8PA4_DIR , DIO_u8PA3_DIR , DIO_u8PA2_DIR , DIO_u8PA1_DIR , DIO_u8PA0_DIR);
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	8a bb       	out	0x1a, r24	; 26
	PORTA = CONC(DIO_u8PA7_VALUE , DIO_u8PA6_VALUE , DIO_u8PA5_VALUE , DIO_u8PA4_VALUE , DIO_u8PA3_VALUE , DIO_u8PA2_VALUE , DIO_u8PA1_VALUE , DIO_u8PA0_VALUE);
 1f0:	1b ba       	out	0x1b, r1	; 27

	DDRB = CONC(DIO_u8PB7_DIR , DIO_u8PB6_DIR , DIO_u8PB5_DIR , DIO_u8PB4_DIR , DIO_u8PB3_DIR , DIO_u8PB2_DIR , DIO_u8PB1_DIR , DIO_u8PB0_DIR);
 1f2:	8f e5       	ldi	r24, 0x5F	; 95
 1f4:	87 bb       	out	0x17, r24	; 23
	PORTB = CONC(DIO_u8PB7_VALUE , DIO_u8PB6_VALUE , DIO_u8PB5_VALUE , DIO_u8PB4_VALUE , DIO_u8PB3_VALUE , DIO_u8PB2_VALUE , DIO_u8PB1_VALUE , DIO_u8PB0_VALUE);
 1f6:	81 e7       	ldi	r24, 0x71	; 113
 1f8:	88 bb       	out	0x18, r24	; 24

	DDRC = CONC(DIO_u8PC7_DIR , DIO_u8PC6_DIR , DIO_u8PC5_DIR , DIO_u8PC4_DIR , DIO_u8PC3_DIR , DIO_u8PC2_DIR , DIO_u8PC1_DIR , DIO_u8PC0_DIR);
 1fa:	85 e9       	ldi	r24, 0x95	; 149
 1fc:	84 bb       	out	0x14, r24	; 20
	PORTC = CONC(DIO_u8PC7_VALUE , DIO_u8PC6_VALUE , DIO_u8PC5_VALUE , DIO_u8PC4_VALUE , DIO_u8PC3_VALUE , DIO_u8PC2_VALUE , DIO_u8PC1_VALUE , DIO_u8PC0_VALUE);
 1fe:	88 e6       	ldi	r24, 0x68	; 104
 200:	85 bb       	out	0x15, r24	; 21

	DDRD = CONC(DIO_u8PD7_DIR , DIO_u8PD6_DIR , DIO_u8PD5_DIR , DIO_u8PD4_DIR , DIO_u8PD3_DIR , DIO_u8PD2_DIR , DIO_u8PD1_DIR , DIO_u8PD0_DIR);
 202:	8e ef       	ldi	r24, 0xFE	; 254
 204:	81 bb       	out	0x11, r24	; 17
	PORTD = CONC(DIO_u8PD7_VALUE , DIO_u8PD6_VALUE , DIO_u8PD5_VALUE , DIO_u8PD4_VALUE , DIO_u8PD3_VALUE , DIO_u8PD2_VALUE , DIO_u8PD1_VALUE , DIO_u8PD0_VALUE);
 206:	12 ba       	out	0x12, r1	; 18

	return Local_enuErrorStatus;
}
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret

Disassembly of section .text.DIO_enuSetPinValue:

0000006c <DIO_enuSetPinValue>:

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;

	if(Copy_u8PortID <= DIO_u8PORTD
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_enuSetPinValue+0x6>
  70:	67 c0       	rjmp	.+206    	; 0x140 <DIO_enuSetPinValue+0xd4>
	&& Copy_u8PinID <= DIO_u8PIN7
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_enuSetPinValue+0xc>
  76:	66 c0       	rjmp	.+204    	; 0x144 <DIO_enuSetPinValue+0xd8>
	&& (Copy_u8PinValue <= DIO_u8HIGH ||Copy_u8PinValue <= DIO_u8PULL_UP ))
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_enuSetPinValue+0x12>
  7c:	65 c0       	rjmp	.+202    	; 0x148 <DIO_enuSetPinValue+0xdc>
	{
		switch(Copy_u8PortID)
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	e9 f0       	breq	.+58     	; 0xbc <DIO_enuSetPinValue+0x50>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_enuSetPinValue+0x24>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	81 f1       	breq	.+96     	; 0xe8 <DIO_enuSetPinValue+0x7c>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_enuSetPinValue+0x22>
  8c:	43 c0       	rjmp	.+134    	; 0x114 <DIO_enuSetPinValue+0xa8>
  8e:	5e c0       	rjmp	.+188    	; 0x14c <DIO_enuSetPinValue+0xe0>
		{
			case DIO_u8PORTA:

			PORTA &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	06 2e       	mov	r0, r22
  96:	02 c0       	rjmp	.+4      	; 0x9c <DIO_enuSetPinValue+0x30>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	0a 94       	dec	r0
  9e:	e2 f7       	brpl	.-8      	; 0x98 <DIO_enuSetPinValue+0x2c>
  a0:	80 95       	com	r24
  a2:	2b b3       	in	r18, 0x1b	; 27
  a4:	28 23       	and	r18, r24

			PORTA |=  (Copy_u8PinValue <<Copy_u8PinID);
  a6:	84 2f       	mov	r24, r20
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_enuSetPinValue+0x44>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_enuSetPinValue+0x40>
  b4:	82 2b       	or	r24, r18
  b6:	8b bb       	out	0x1b, r24	; 27

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
  b8:	80 e0       	ldi	r24, 0x00	; 0

			PORTA &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);

			PORTA |=  (Copy_u8PinValue <<Copy_u8PinID);

			break;
  ba:	08 95       	ret
			case DIO_u8PORTB:
			PORTB &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	06 2e       	mov	r0, r22
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_enuSetPinValue+0x5c>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_enuSetPinValue+0x58>
  cc:	20 95       	com	r18
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	28 23       	and	r18, r24

			PORTB |=  (Copy_u8PinValue <<Copy_u8PinID);
  d2:	84 2f       	mov	r24, r20
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_enuSetPinValue+0x70>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_enuSetPinValue+0x6c>
  e0:	82 2b       	or	r24, r18
  e2:	88 bb       	out	0x18, r24	; 24

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
  e4:	80 e0       	ldi	r24, 0x00	; 0
			case DIO_u8PORTB:
			PORTB &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);

			PORTB |=  (Copy_u8PinValue <<Copy_u8PinID);

			break;
  e6:	08 95       	ret
			case DIO_u8PORTC:
			PORTC &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	06 2e       	mov	r0, r22
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_enuSetPinValue+0x88>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_enuSetPinValue+0x84>
  f8:	20 95       	com	r18
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	28 23       	and	r18, r24

			PORTC |=  (Copy_u8PinValue <<Copy_u8PinID);
  fe:	84 2f       	mov	r24, r20
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_enuSetPinValue+0x9c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_enuSetPinValue+0x98>
 10c:	82 2b       	or	r24, r18
 10e:	85 bb       	out	0x15, r24	; 21

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
 110:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case DIO_u8PORTC:
			PORTC &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);

			PORTC |=  (Copy_u8PinValue <<Copy_u8PinID);
			break;
 112:	08 95       	ret
			case DIO_u8PORTD:
			PORTD &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	06 2e       	mov	r0, r22
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_enuSetPinValue+0xb4>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_enuSetPinValue+0xb0>
 124:	20 95       	com	r18
 126:	82 b3       	in	r24, 0x12	; 18
 128:	28 23       	and	r18, r24

			PORTD |=  (Copy_u8PinValue <<Copy_u8PinID);
 12a:	84 2f       	mov	r24, r20
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_enuSetPinValue+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_enuSetPinValue+0xc4>
 138:	82 2b       	or	r24, r18
 13a:	82 bb       	out	0x12, r24	; 18

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
 13c:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case DIO_u8PORTD:
			PORTD &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);

			PORTD |=  (Copy_u8PinValue <<Copy_u8PinID);
			break;
 13e:	08 95       	ret
		}
	}
	else
	{
		Local_enuErrorStatus = ES_OUT_OF_RANGE;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	08 95       	ret
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	08 95       	ret
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	08 95       	ret

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
 14c:	80 e0       	ldi	r24, 0x00	; 0

	}

	return Local_enuErrorStatus;

}
 14e:	08 95       	ret

Disassembly of section .text.UART_enuInit:

000001c0 <UART_enuInit>:
	
	// sent data IF (UDRE = 1 )
	UDR=dataByte;
	 return STD_OK;

}
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	8d 7f       	andi	r24, 0xFD	; 253
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	8a b1       	in	r24, 0x0a	; 10
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	8a b9       	out	0x0a, r24	; 10
 1d2:	8a b1       	in	r24, 0x0a	; 10
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	8a b9       	out	0x0a, r24	; 10
 1d8:	8a b1       	in	r24, 0x0a	; 10
 1da:	8b 7f       	andi	r24, 0xFB	; 251
 1dc:	8a b9       	out	0x0a, r24	; 10
 1de:	8e e8       	ldi	r24, 0x8E	; 142
 1e0:	80 bd       	out	0x20, r24	; 32
 1e2:	87 e6       	ldi	r24, 0x67	; 103
 1e4:	89 b9       	out	0x09, r24	; 9
 1e6:	10 bc       	out	0x20, r1	; 32
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret

Disassembly of section .text.UART_enuResiveDataByte:

0000020c <UART_enuResiveDataByte>:
/***************************************/
ERROR UART_enuResiveDataByte(u8 *copy_pu8recive )
{
	if(copy_pu8recive!=NULL)
 20c:	00 97       	sbiw	r24, 0x00	; 0
 20e:	39 f0       	breq	.+14     	; 0x21e <UART_enuResiveDataByte+0x12>
	{ 
		// wait the data is resived finised
		while(GET_BIT(UCSRA,RXC)==0);
 210:	5f 9b       	sbis	0x0b, 7	; 11
 212:	fe cf       	rjmp	.-4      	; 0x210 <UART_enuResiveDataByte+0x4>
		//read data from register 
		*copy_pu8recive=UDR;
 214:	2c b1       	in	r18, 0x0c	; 12
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
	}
	else {
		return STD_NOTOK;
	}
	
	return STD_OK;
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	08 95       	ret
		while(GET_BIT(UCSRA,RXC)==0);
		//read data from register 
		*copy_pu8recive=UDR;
	}
	else {
		return STD_NOTOK;
 21e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return STD_OK;
}
 220:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000240 <_fini>:
 240:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000242 <__funcs_on_exit>:
 242:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000244 <__simulator_exit>:
 244:	08 95       	ret

Disassembly of section .text.exit:

00000222 <exit>:
 222:	ec 01       	movw	r28, r24
 224:	0e 94 21 01 	call	0x242	; 0x242 <__funcs_on_exit>
 228:	0e 94 20 01 	call	0x240	; 0x240 <_fini>
 22c:	ce 01       	movw	r24, r28
 22e:	0e 94 22 01 	call	0x244	; 0x244 <__simulator_exit>
 232:	ce 01       	movw	r24, r28
 234:	0e 94 1e 01 	call	0x23c	; 0x23c <_Exit>

Disassembly of section .text._Exit:

0000023c <_Exit>:
 23c:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
